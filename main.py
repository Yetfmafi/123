import telebot
import json
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∑–∫–∞ API —Ç–æ–∫–µ–Ω–∞
API_TOKEN = "7973051942:AAGoXJul4_G93tsVwOAsSi2CYYTZ9IYQ1CM"
bot = telebot.TeleBot(API_TOKEN)

# –°–ø–∏—Å–æ–∫ executors
executors = [
    {"name": "Xeno", "sUNC": "41%", "UNC": "81%", "level": 3, "hoho": "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Solara", "sUNC": "51%", "UNC": "66%", "level": 3, "hoho": "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Zorara", "sUNC": "41%", "UNC": "89%", "level": 3, "hoho": "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "JJSploit", "sUNC": "40%~", "UNC": "~", "level": 3, "hoho": "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "VegaX", "sUNC": "99%", "UNC": "UNC~", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Argon", "sUNC": "100%", "UNC": "100%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Wave", "sUNC": "100%", "UNC": "100%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Nihon", "sUNC": "100%", "UNC": "100%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Cryptic", "sUNC": "100%", "UNC": "100%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Seliware", "sUNC": "100%", "UNC": "100%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "AWP.gg", "sUNC": "99%", "UNC": "100%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Synapse Z", "sUNC": "~%", "UNC": "100%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Macsploit", "sUNC": "~%", "UNC": "98%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Swift", "sUNC": "93%", "UNC": "94%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
    {"name": "Trigon", "sUNC": "~%", "UNC": "~%", "level": 8, "hoho": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HoHo Hub"},
]

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
SCRIPTS_FILE = "scripts.json"

def load_scripts():
    try:
        with open(SCRIPTS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_scripts(scripts):
    with open(SCRIPTS_FILE, "w", encoding="utf-8") as file:
        json.dump(scripts, file, ensure_ascii=False, indent=4)

scripts = load_scripts()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚öôÔ∏è Executors"), KeyboardButton("üìú Scripts"))
    return markup

# –ú–µ–Ω—é "Executors"
def executors_menu():
    markup = InlineKeyboardMarkup()
    for idx, ex in enumerate(executors):
        markup.add(InlineKeyboardButton(ex["name"], callback_data=f"executor_{idx}"))
    return markup

# –ú–µ–Ω—é "Scripts"
def scripts_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º", callback_data="search_scripts"))
    for idx, script in enumerate(scripts):
        markup.add(InlineKeyboardButton(f"üìú {script['name']} - @{script['author']}", callback_data=f"script_{idx}"))
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç", callback_data="add_script"))
    return markup

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_menu()
    )

# –ü–æ–∫–∞–∑ Executors
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è Executors")
def show_executors(message):
    bot.send_message(
        message.chat.id,
        "‚öôÔ∏è –°–ø–∏—Å–æ–∫ Executors:",
        reply_markup=executors_menu()
    )

# –í—ã–±–æ—Ä Executor
@bot.callback_query_handler(func=lambda call: call.data.startswith("executor_"))
def executor_details(call):
    idx = int(call.data.split("_")[1])
    ex = executors[idx]
    bot.send_message(
        call.message.chat.id,
        f"‚öôÔ∏è **Executor:** {ex['name']}\n"
        f"üî∏ sUNC: {ex['sUNC']}\n"
        f"üîπ UNC: {ex['UNC']}\n"
        f"üìä Level: {ex['level']}\n"
        f"{ex['hoho']}",
        parse_mode="Markdown"
    )

# –ü–æ–∫–∞–∑ Scripts
@bot.message_handler(func=lambda message: message.text == "üìú Scripts")
def show_scripts(message):
    bot.send_message(
        message.chat.id,
        "üìú –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤:",
        reply_markup=scripts_menu()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (—à–∞–≥ 1)
@bot.callback_query_handler(func=lambda call: call.data == "add_script")
def add_script_step1(call):
    bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞:")
    bot.register_next_step_handler(call.message, add_script_step2)

# –®–∞–≥ 2 - –û–ø–∏—Å–∞–Ω–∏–µ
def add_script_step2(message):
    script_data = {"name": message.text, "author": message.from_user.username or "–ê–Ω–æ–Ω–∏–º"}
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞:")
    bot.register_next_step_handler(message, add_script_step3, script_data)

# –®–∞–≥ 3 - –•—ç—à—Ç–µ–≥–∏
def add_script_step3(message, script_data):
    script_data["description"] = message.text
    bot.send_message(message.chat.id, "üè∑ –í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    bot.register_next_step_handler(message, add_script_step4, script_data)

# –®–∞–≥ 4 - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
# –®–∞–≥ 4 - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
def add_script_step4(message, script_data):
    script_data["tags"] = [tag.strip() for tag in message.text.split(",") if tag.strip()]
    bot.send_message(message.chat.id, "üíª –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞:")
    bot.register_next_step_handler(message, add_script_finish, script_data)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
def add_script_finish(message, script_data):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤ data
    script_data["content"] = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if not is_unique_script_content(script_data["content"]):
        bot.send_message(
            message.chat.id,
            "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å!"
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ

    scripts.append(script_data)
    save_scripts(scripts)
    bot.send_message(message.chat.id, "‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
def is_unique_script_content(content):
    for script in scripts:
        if script['content'] == content:
            return False  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    return True  # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True

# –ü–æ–∏—Å–∫ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
@bot.callback_query_handler(func=lambda call: call.data == "search_scripts")
def search_scripts(call):
    bot.send_message(call.message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(call.message, perform_search)

def perform_search(message):
    tag = message.text.lower()
    found_scripts = [
        s for s in scripts if any(tag in t.lower() for t in s["tags"])
    ]
    if found_scripts:
        for idx, script in enumerate(found_scripts):
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton(
                    "üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä–∏–ø—Ç",
                    callback_data=f"show_script_{scripts.index(script)}"
                )
            )
            bot.send_message(
                message.chat.id,
                f"üîñ **{script['name']}**\n"
                f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: @{script['author']}\n"
                f"üè∑ –•—ç—à—Ç–µ–≥–∏: {', '.join(script['tags'])}",
                parse_mode="Markdown",
                reply_markup=markup
            )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –°–∫—Ä–∏–ø—Ç—ã —Å —Ç–∞–∫–∏–º —Ö—ç—à—Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("show_script_"))
def show_script_content_found(call):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ callback_data
    idx = int(call.data.split("_")[-1])
    script = scripts[idx]
    bot.send_message(
        call.message.chat.id,
        f"üìú **–°–∫—Ä–∏–ø—Ç:** {script['name']}\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: @{script['author']}\n"
        f"üè∑ –•—ç—à—Ç–µ–≥–∏: {', '.join(script['tags'])}\n\n"
        f"üíª –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞:\n```{script['content']}```",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–æ–π–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        parse_mode="Markdown"
    )

# –ü–æ–∫–∞–∑ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–∏ –µ–≥–æ –≤—ã–±–æ—Ä–µ –∏–∑ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data.startswith("script_"))
def show_script_content_list(call):
    idx = int(call.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–∫—Ä–∏–ø—Ç–∞
    script = scripts[idx]  # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    bot.send_message(
        call.message.chat.id,
        f"üìú **–°–∫—Ä–∏–ø—Ç:** {script['name']}\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: @{script['author']}\n"
        f"üè∑ –•—ç—à—Ç–µ–≥–∏: {', '.join(script['tags'])}\n\n"
        f"üíª –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞:\n```{script['content']}```",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        parse_mode="Markdown"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
